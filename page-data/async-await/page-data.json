{"componentChunkName":"component---src-templates-blog-template-js","path":"/async-await","result":{"data":{"markdownRemark":{"html":"<p>I recently found out that <code>async</code> functions will return a promise implicitly. I've been returning promises explicitly for as long as I can remember and I've never had a linter complain. So I read the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">documentation</a> and this is what I learned.</p>\n<h2>Wait, Don't await!</h2>\n<p><code>async</code> functions wrap the return value in a promise. This means both functions below are equivalent.</p>\n<pre><code class=\"language-javascript\">// both functions return a promise\nasync myFunc(){ return await someAsyncFunc()};\nasync ourFunc(){ return someAsyncFunc()}\n</code></pre>\n<h2>async/await under the hood</h2>\n<p>As someone who worked with promise chains because my node environment did not support <code>async/await</code>, I am ecstatic whenever I don't have to use chains. While reading the documentation, I realized that async functions are still building these promise chains under the hood!</p>\n<p>A nice way to think about async/await as written in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">docs</a> is <strong>Code after each await expression can be thought of as existing in a .then callback.</strong></p>\n<p>Understanding exactly how async/await works and how it relates to the previous methods for handling promises will make our lives as developers easier when we need to debug some failed async function.</p>","excerpt":"I recently found out that async functions will return a promise implicitly. I've been returning promises explicitly for as long as I canâ€¦","frontmatter":{"date":"February 21, 2021","path":"/async-await","title":"I Solemly Swear to return a promise","keywords":"JavaScript, promises, async, await"}}},"pageContext":{}}}